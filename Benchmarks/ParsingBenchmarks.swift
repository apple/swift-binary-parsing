//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Binary Parsing open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
//
//===----------------------------------------------------------------------===//

// Benchmark boilerplate generated by Benchmark
import Benchmark
import BinaryParsing
import Foundation
import ParserTest
import TestData

// These force unwraps are configuration-dependent, can fix if they fail
// swift-format-ignore: NeverForceUnwrap
nonisolated(unsafe)
  let benchmarks = {
    Benchmark("LZ4") { benchmark, data in
      for _ in benchmark.scaledIterations {
        var data = data
        blackHole(data.count)
        let uncompressed = try LZ4(parsing: data)
        blackHole(uncompressed.data.count)
      }
    } setup: {
      testData(named: "LZ4/tricolor.qoi.lz4")!
    }

    Benchmark("PCAP") { benchmark, data in
      for _ in benchmark.scaledIterations {
        var data = data
        blackHole(data.count)
        let pcapData = try PCAPNG(parsing: data)
        blackHole(pcapData.header.sectionLength)
      }
    } setup: {
      testData(named: "PCAP/sample.pcap")!
    }

    Benchmark("PList") { benchmark, data in
      for _ in benchmark.scaledIterations {
        blackHole(data.count)
        let plistData = try data.withByteBuffer { buffer in
          try BPList(parsing: &buffer)
        }
        blackHole(plistData.trailer.offsetTable.count)
        blackHole(plistData.topObject)
      }
    } setup: {
      testData(named: "PList/sample.plist")!
    }

    Benchmark("PList-Foundation") { benchmark, data in
      for _ in benchmark.scaledIterations {
        blackHole(data.count)
        let plistData = try PropertyListSerialization.propertyList(
          from: data, options: [], format: nil)
        blackHole(plistData)
      }
    } setup: {
      testData(named: "PList/sample.plist")!
    }

    Benchmark("PNG1") { benchmark, data in
      for _ in benchmark.scaledIterations {
        var data = data
        blackHole(data.count)
        let png = try PNG(parsing: data)
        blackHole(png.header.width)
      }
    } setup: {
      testData(named: "PNG/tricolor.png")!
    }

    Benchmark("PNG2") { benchmark, data in
      for _ in benchmark.scaledIterations {
        var data = data
        blackHole(data.count)
        let png = try PNG(parsing: data)
        blackHole(png.header.width)
      }
    } setup: {
      testData(named: "PNG/antelope.png")!
    }

    Benchmark("QOI1") { benchmark, data in
      for _ in benchmark.scaledIterations {
        var data = data
        blackHole(data.count)
        let qoi = try QOI(parsing: data)
        blackHole(qoi.width)
      }
    } setup: {
      testData(named: "QOI/tricolor.qoi")!
    }

    Benchmark("QOI2") { benchmark, data in
      for _ in benchmark.scaledIterations {
        var data = data
        blackHole(data.count)
        let qoi = try QOI(parsing: data)
        blackHole(qoi.width)
      }
    } setup: {
      testData(named: "QOI/antelope.qoi")!
    }
  }
